version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: hangman
      POSTGRES_PASSWORD: hangman_password
      POSTGRES_DB: hangman_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hangman -d hangman_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hangman-network

  # Hangman Application (Pre-built)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://hangman:hangman_password@db:5432/hangman_db
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e 'const http = require(\"http\"); const req = http.request({hostname:\"localhost\",port:5000,path:\"/health\",timeout:2000}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on(\"error\", () => process.exit(1)); req.end();'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hangman-network

volumes:
  postgres_data:
    driver: local

networks:
  hangman-network:
    driver: bridge